// Module Row Grid
// ---------------
// Creates a module row with *n* columns inside the content area,
// constrained by the maximum width defined in --contentWidthMax.
//
// The layout includes two additional outer column areas:
// - An inset column on each side with a fixed width of --contentInset,
//   ensuring the minimum distance between content and viewport edge.
// - A flexible outer column on each side that fills the remaining space
//   between the inset and the content area.
//
// All columns — including outer, inset, and content columns — are placed
// within a single grid container. This enables the use of `subgrid`,
// allowing elements to span both the content area and the outer columns.
// Nested grids are not an option in this case.
//
// Since spacing is only required between the content columns (but not
// between the outer columns), we avoid using the `grid-gap` property.
// Instead, we insert explicit gutter columns between content columns,
// each with a fixed width of --sz-gutter.
//
// To ensure the combined width of the *n* content columns does not exceed
// --contentWidthMax, each content column’s maximum width is calculated as:
//
// (--contentWidthMax / n) - ((--sz-gutter / n) * (n - 1))
//
// The number of content columns (--contentColumns) must be set dynamically
// via media queries or container queries outside this mixin.



@mixin moduleRow {

  --n: var(--contentColumns, 4);
  --gapColumn: var(--sz-gutter, 20px);
  --contentColumn: minmax(10px, calc(var(--contentWidthMax, 1200px) / var(--n) - (var(--sz-gutter, 20px) / var(--n) * (var(--n) - 1))));



  display: grid;
  grid-template-columns:

    // flexible outer space (left)
    minmax(0, 10fr)
    
    // min space between content and browser edge (left)
    var(--contentInset, 20px)
    
    // repeat n - 1 times: (content column + gap column)
    repeat(calc(var(--n) - 1), var(--contentColumn) var(--gapColumn))
    
    // last content column
    var(--contentColumn)
    
    // min space between content and browser edge (right)
    var(--contentInset, 20px) 
    
    // flexible outer space (right)
    minmax(0, 10fr);
    
  place-items: stretch;
}



@mixin placeInContentArea {
  grid-column: 3 / -3;
}



@mixin placeBleedLeft {
  grid-column: 1 / -3;
}



@mixin placeBleedRight {
  grid-column: 3 / -1;
}



@mixin subgrid {
  display: grid;
  grid-template-columns: subgrid;
}
